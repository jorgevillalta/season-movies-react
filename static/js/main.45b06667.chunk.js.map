{"version":3,"sources":["middleware/helpers.js","middleware/tmdb-api.js","features/movies/moviesSlice.js","blocks/MovieList.jsx","components/Loader.jsx","blocks/MoviePoster.jsx","blocks/helpers.js","components/MovieCard.jsx","features/layouts/layoutsSlice.js","containers/MovieContainer.jsx","containers/MovieGroup.jsx","containers/MovieModal.jsx","containers/MoviePage.jsx","common/scroll.helpers.js","store/index.js","App.js","reportWebVitals.js","index.js"],"names":["REACT_APP_MOVIE_IMAGE_BASE_URL","process","TMDB_IMAGE_BASE_URL","width","updateMoviePictureUrls","movieResult","backdrop_path","poster_path","normalizeMovieList","movieList","map","movie","REACT_APP_MOVIE_DB_API_KEY","REACT_APP_MOVIE_DB_BASE_URL","createMovieDbUrl","relativeUrl","queryParams","baseUrl","Object","keys","forEach","paramName","callApi","endpoint","a","fetch","response","ok","message","status","Error","json","getMovieDetails","movieId","fullUrl","getMoviesInDate","date","Date","page","Promise","reject","dateStart","getTime","setMonth","getMonth","language","region","sort_by","include_adult","toISOString","split","results","moviesAdapter","createEntityAdapter","initialState","getInitialState","isLoading","currentPage","movieSelected","fetchMovies","createAsyncThunk","getState","fetchMoviesNext","nextPage","selectCurrentPage","fetctMovieDetail","selectMoviesById","detailLoaded","id","movieDetail","moviesSlice","createSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","setAll","payload","addMany","updateOne","changes","addMatcher","type","startsWith","endsWith","selectSelf","getSelectors","movies","selectMovies","selectAll","selectById","selectTotal","createDraftSafeSelector","selectIsLoading","selectMovieSelected","MovieList","styled","div","LoaderComponent","children","size","value","Component","MoviePoster","props","maxWidth","className","loading","Classes","SKELETON","Image","img","Title","fill","intent","Intent","PRIMARY","MovieCard","onClick","src","title","layoutsSlice","movieModal","layoutOpen","layoutClose","actions","selectMovieModal","createSelector","layouts","selectIsMovieModalOpen","MovieContainer","dispatch","useDispatch","MovieGroup","Loader","StyledDialog","Dialog","MovieModal","isOpened","useSelector","useMemo","release_date","toLocaleDateString","genres","genre","join","budget","toLocaleString","overview","popularity","onClose","isOpen","DIALOG_BODY","StyledContentDiv","StyledGridDiv","MoviePage","useState","birthDate","setBirthDate","useEffect","handleScroll","window","pageHeight","document","documentElement","scrollHeight","clientHeight","pageYOffset","scrollHelpers","onscroll","removeEventListener","fixedToTop","align","Alignment","LEFT","formatDate","onChange","isUserChange","parseDate","str","placeholder","minDate","store","configureStore","reducer","moviesReducer","middleware","getDefaultMiddleware","concat","logger","GlobalStyle","createGlobalStyle","theme","colors","lightGray1","lightGray2","lightGray3","lightGray4","lightGray5","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2TAAQA,G,MAAmCC,gCAErCC,EAAsB,eAACC,EAAD,uDAAS,IAAT,gBAAoBH,GAApB,OAAqDG,IAE1E,SAASC,EAAuBC,GAA2B,IAAdF,EAAa,uDAAL,IAC1D,OAAO,2BACFE,GADL,IAEEC,cACED,EAAYC,eAAZ,UAAgCJ,EAAoBC,IAApD,OAA6DE,EAAYC,eAC3EC,YACEF,EAAYE,aAAZ,UAA8BL,EAAoBC,IAAlD,OAA2DE,EAAYE,eActE,SAASC,EAAmBC,GAIjC,OAFqBA,EAAUC,KAAI,SAACC,GAAD,OAAWP,EAAuBO,M,QCxBHV,8UAA5DW,E,EAAAA,2BAA4BC,E,EAAAA,4BAE9BC,EAAmB,SAACC,EAAaC,GACrC,IAAIC,EAAO,UAAMJ,GAAN,OAAoCE,EAApC,oBAA2DH,EAA3D,mBAMX,OALII,GACFE,OAAOC,KAAKH,GAAaI,SACvB,SAACC,GAAD,OAAgBJ,GAAO,WAAQI,EAAR,YAAqBL,EAAYK,OAGrDJ,GAGHK,EAAO,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,sEACSC,MAAMF,GADf,WACRG,EADQ,QAGAC,GAHA,sBAINC,EAJM,gCAI6BF,EAASG,QAC5C,IAAIC,MAAMF,GALJ,uBASKF,EAASK,OATd,cASRA,EATQ,wCAWFA,IAXE,4CAAH,sDA6BAC,EAAe,uCAAG,mCAAAR,EAAA,6DAASS,EAAT,EAASA,QAChCC,EAAUpB,EAAiB,UAAD,OAAWmB,IADd,SAINX,EAAQY,GAJF,cAIvBR,EAJuB,OAOvBf,EAAQP,EAAuBsB,GAPR,kBAStBf,GATsB,2CAAH,sDAYfwB,EAAe,uCAAG,2CAAAX,EAAA,6DAASY,YAAT,MAAgB,IAAIC,KAApB,MAA4BC,YAA5B,MAAmC,EAAnC,EACvBF,aAAgBC,KADO,yCAEpBE,QAAQC,OAAO,0BAFK,cAKvBC,EAAY,IAAIJ,KAAKD,EAAKM,YACtBC,SAASP,EAAKQ,WAAa,GAE/BV,EAAUpB,EAAiB,kBAAmB,CAClDwB,OACAO,SAAU,QACVC,OAAQ,KACRC,QAAS,kBACTC,eAAe,EACf,2BAA4BP,EAAUQ,cAAcC,MAAM,KAAK,GAC/D,2BAA4Bd,EAAKa,cAAcC,MAAM,KAAK,KAf/B,SAmBN5B,EAAQY,GAnBF,cAmBvBR,EAnBuB,OAsBvBjB,EAAYD,EAAmBkB,EAASyB,SAtBjB,kBAwBtB1C,GAxBsB,4CAAH,sDC/CtB2C,EAAgBC,cAGhBC,EAAeF,EAAcG,gBAAgB,CACjDC,WAAW,EACXC,YAAa,EACbC,cAAe,OAIJC,EAAcC,YACzB,qBADyC,uCAEzC,qCAAApC,EAAA,iEAASY,YAAT,MAAgB,IAAIC,KAApB,IAAgCwB,SACxBJ,EAAc,EADtB,SAE0BtB,EAAgB,CAAEC,OAAME,KAAMmB,IAFxD,cAEQhD,EAFR,yBAGS,CAAEA,YAAWgD,gBAHtB,2CAFyC,yDAU9BK,EAAkBF,YAC7B,yBAD6C,uCAE7C,qCAAApC,EAAA,6DAASY,EAAT,EAASA,KAAUyB,EAAnB,EAAmBA,SACXE,EAAWC,EAAkBH,KAAc,EADnD,SAE0B1B,EAAgB,CAAEC,OAAME,KAAMyB,IAFxD,cAEQtD,EAFR,yBAGS,CAAEA,YAAWgD,YAAaM,IAHnC,2CAF6C,yDAUlCE,EAAmBL,YAC9B,0BAD8C,uCAE9C,qCAAApC,EAAA,yDAASS,EAAT,EAASA,QAAa4B,EAAtB,EAAsBA,WAAtB,QAEQlD,EAAQuD,EAAiBL,IAAY5B,UAF7C,IAIMtB,OAJN,EAIMA,EAAOwD,cAJb,yCAKW,CAAEC,GAAInC,EAASoC,YAAa1D,IALvC,uBAQ4BqB,EAAgB,CAAEC,YAR9C,cAQQoC,EARR,yBASS,CAAED,GAAInC,EAASoC,gBATxB,2CAF8C,yDAyDjCC,EAzCYC,YAAY,CACrCC,KAAM,SACNlB,eACAmB,SAAU,GACVC,cAAe,SAACC,GACdA,EACGC,QAAQjB,EAAYkB,WAAW,SAACC,EAAOC,GACtC3B,EAAc4B,OAAOF,EAAOC,EAAOE,QAAQxE,WAC3CqE,EAAMrB,YAAcsB,EAAOE,QAAQxB,YACnCqB,EAAMtB,WAAY,KAEnBoB,QAAQd,EAAgBe,WAAW,SAACC,EAAOC,GAC1C3B,EAAc8B,QAAQJ,EAAOC,EAAOE,QAAQxE,WAC5CqE,EAAMrB,YAAcsB,EAAOE,QAAQxB,YACnCqB,EAAMtB,WAAY,KAEnBoB,QAAQX,EAAiBY,WAAW,SAACC,EAAOC,GAAY,IAAD,EAC1BA,EAAOE,QAA3Bb,EAD8C,EAC9CA,GAAIC,EAD0C,EAC1CA,YAEZjB,EAAc+B,UAAUL,EAAO,CAC7BV,KACAgB,QAAQ,2BAAMf,GAAP,IAAoBF,cAAc,MAE3CW,EAAMpB,cAAgBU,EACtBU,EAAMtB,WAAY,KAEnB6B,YAEC,SAACN,GAAD,OAAYA,EAAOO,KAAKC,WAAW,YAAcR,EAAOO,KAAKE,SAAS,cACtE,SAACV,EAAOC,GACND,EAAMtB,WAAY,EAClBsB,EAAMpB,cAAgB,WAUhC,QAGM+B,EAAa,SAACX,GAAD,OAAWA,G,EAM1B1B,EAAcsC,cAAa,SAACZ,GAAD,OAAWA,EAAMa,UAHnCC,E,EAAXC,UACY3B,E,EAAZ4B,WAIW9B,G,EAHX+B,YAG+BC,YAC/BP,GACA,SAACX,GAAD,OAAWA,EAAMa,OAAOlC,gBAGbwC,EAAkBD,YAC7BP,GACA,SAACX,GAAD,OAAWA,EAAMa,OAAOnC,aAGb0C,EAAsBF,YAAwBP,GAAY,SAACX,GAAD,OACrEZ,EAAiBY,EAAOA,EAAMa,OAAOjC,kBCrGxByC,EAdGC,IAAOC,IAAV,wP,OCSAC,MARf,YAAmD,IAAxB9C,EAAuB,EAAvBA,UAAW+C,EAAY,EAAZA,SACpC,OAAI/C,EACK,cAAC,IAAD,CAASgD,KAAM,GAAIC,MAAO,OAG5BF,GAAsB,M,eCF/B,ICH4BG,EDGtBC,GCHsBD,EDGIN,IAAOC,IAAR,kEAACD,CAAD,oLAQhB,SAACQ,GAAD,OAAWA,EAAMC,UAAY,UCVnC,SAACD,GAAD,OAAW,cAACF,EAAD,aAAWI,UAAWF,EAAMG,SAAWC,IAAQC,UAAcL,MDiB3EM,EAAQd,IAAOe,IAAV,yEAAGf,CAAH,qBAILgB,EAAQhB,aAAO,gBAAMQ,EAAN,2BAAkB,cAAC,IAAD,aAAKS,MAAM,EAAMC,OAAQC,IAAOC,SAAaZ,OAAzE,yEAAGR,CAAH,MAGXO,EAAYO,MAAQA,EACpBP,EAAYS,MAAQA,EAELT,I,EAAAA,KElBAc,GATG,SAAC,GAAwB,IAAtB9G,EAAqB,EAArBA,MAAO+G,EAAc,EAAdA,QAC1B,OACE,eAAC,GAAD,CAAaA,QAASA,EAASb,SAAS,QAAxC,UACE,cAAC,GAAYK,MAAb,CAAmBS,IAAKhH,EAAMJ,cAC9B,cAAC,GAAY6G,MAAb,UAAoBzG,EAAMiH,Y,SCF1BC,GAAetD,YAAY,CAC/BC,KAAM,UACNlB,aANmB,CACnBwE,WAAY,UAMZrD,SAAU,CACRsD,WADQ,SACGjD,EAAOC,GAEhBD,EADgBC,EAAOE,SACN,UAEnB+C,YALQ,SAKIlD,EAAOC,GAEjBD,EADgBC,EAAOE,SACN,a,GAMoB4C,GAAaI,QAAzCF,G,GAAAA,WAAYC,G,GAAAA,YAGZH,MAAf,QAKaK,GAAmBC,cAFb,SAACrD,GAAD,OAAWA,KAE6B,SAACA,GAAD,OAAWA,EAAMsD,QAAQN,cAEvEO,GAAyBF,aACpCD,IACA,SAACJ,GAAD,MAA+B,WAAfA,KClBHQ,GAVQ,SAAC,GAAe,IAAb3H,EAAY,EAAZA,MAClB4H,EAAWC,cAMjB,OAAO,cAAC,GAAD,CAAW7H,MAAOA,EAAO+G,QALJ,WAC1Ba,EAAStE,EAAiB,CAAEhC,QAAStB,EAAMyD,MAC3CmE,EAASR,GAAW,mBCMTU,GAVI,SAAC,GAA2B,IAAzB9C,EAAwB,EAAxBA,OAAQnC,EAAgB,EAAhBA,UAC5B,OACE,eAAC,EAAD,WACGmC,GACCA,EAAOjF,KAAI,SAACC,GAAD,OAAW,cAAC,GAAD,CAAgBA,MAAOA,GAAYA,EAAMyD,OACjE,cAACsE,EAAD,CAAiBlF,UAAWA,QCF5BmF,GAAevC,YAAOwC,KAAV,+EAAGxC,CAAH,MAyDHyC,GA9BI,WACjB,IAfsBlI,EAehB4H,EAAWC,cAEXM,EAAWC,YAAYV,IACvB7E,EAAYuF,YAAY9C,GAJP,GAbvBtF,GADsBA,EAsBpBoI,YAAY7C,KArBG,GAEV8C,mBACL,8BAAC,eACIrI,GADL,IAEEyB,KAAOzB,EAAMsI,cAAgB,IAAI5G,KAAK1B,EAAMsI,cAAcC,sBAAyB,GACnFC,OAAQxI,EAAMwI,OAASxI,EAAMwI,OAAOzI,KAAI,SAAC0I,GAAD,OAAWA,EAAM5E,QAAM6E,KAAK,MAAQ,GAC5EC,OAAS3I,EAAM2I,QAAN,WAAoB3I,EAAM2I,OAAOC,mBAAuB,gBAEnE,CAAC5I,KAWKiH,EAPe,EAOfA,MAAOxF,EAPQ,EAORA,KAAM+G,EAPE,EAOFA,OAAQK,EAPN,EAOMA,SAAUC,EAPhB,EAOgBA,WAAYH,EAP5B,EAO4BA,OAOnD,OACE,cAACX,GAAD,CAAcf,MAAO,KAAM8B,QAHA,kBAAMnB,EAASP,GAAY,gBAGI2B,OAAQb,EAAlE,SACE,qBAAKhC,UAAWE,IAAQ4C,YAAxB,SACE,eAAClB,EAAD,CAAQlF,UAAWA,EAAnB,UACE,cAAC,IAAD,UAAKoE,IACL,cAAC,IAAD,UAAKxF,IACL,cAAC,IAAD,UAAK+G,IACL,4BAAIK,IACJ,6CAAgBC,KAChB,yCAAYH,aC3ChBO,GAAmBzD,IAAOC,IAAV,kFAAGD,CAAH,0BAMhB0D,GAAgB1D,IAAOC,IAAV,+EAAGD,CAAH,yJAgFJ2D,GAlEG,WAChB,IAAMxB,EAAWC,cADK,EAGYwB,mBAAS,IAAI3H,KAAK,eAH9B,mBAGf4H,EAHe,KAGJC,EAHI,KAKhBzJ,EAAYsI,YAAYnD,GACxBpC,EAAYuF,YAAY9C,GA8B9B,OApBAkE,qBAAU,WACR5B,EAAS5E,EAAY,CAAEvB,KAAM6H,OAC5B,CAAC1B,EAAU0B,IAGdE,qBAAU,WACR,IAAMC,EAAe,WACd5G,GC3D4B,SAAC6G,GACtC,IAAMC,EAAaD,EAAOE,SAASC,gBAAgBC,aAC7CC,EAAeL,EAAOE,SAASC,gBAAgBE,aAIrD,OAHkBL,EAAOM,YACWD,GACSJ,EDuDdM,CAAsCP,QACtC,KACvB9B,EAASzE,EAAgB,CAAE1B,KAAM6H,MAMvC,OAFAI,OAAOQ,SAAWT,EAEX,kBAAMC,OAAOS,oBAAoB,SAAUV,MACjD,CAAC7B,EAAU/E,EAAWyG,IAIvB,qCACE,cAAC,IAAD,CAAQc,YAAY,EAAMjE,UAAU,WAApC,SACE,cAAC,IAAD,CAAakE,MAAOC,IAAUC,KAA9B,SACE,cAAC,IAAD,gCAGJ,eAACrB,GAAD,WACE,wBACA,eAACC,GAAD,WACE,8BACE,cAAC,IAAD,CACEqB,WAAY,SAAC/I,GAAD,OAAUA,EAAK8G,sBAC3BkC,SAxCa,SAAChJ,EAAMiJ,GAC1BA,GACFnB,EAAa,IAAI7H,KAAKD,KAuCdkJ,UAAW,SAACC,GAAD,OAAS,IAAIlJ,KAAKkJ,IAC7BC,YAAa,WACbC,QAAS,IAAIpJ,KAAK,cAClBoE,MAAOwD,MAGX,8BACE,cAAC,GAAD,CAAYtE,OAAQlF,EAAW+C,UAAWA,YAIhD,cAAC,GAAD,Q,oBEpFSkI,GARDC,YAAe,CAC3BC,QAAS,CACPjG,OAAQkG,EACRzD,QAASP,IAEXiE,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,OAAOC,SCDhEC,GAAcC,YAAH,kWAcXC,GAAQ,CACZC,OAAQ,CACNC,WAAY,UACZC,WAAY,UACZC,WAAY,UACZC,WAAY,UACZC,WAAY,YAiBDC,OAbf,WACE,OACE,cAAC,IAAD,CAAeP,MAAOA,GAAtB,SACE,cAAC,IAAD,CAAUV,MAAOA,GAAjB,SACE,qCACE,cAAC,GAAD,IACA,cAACQ,GAAD,YC3BKU,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCIdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFhD,SAASiD,eAAe,SAM1BZ,O","file":"static/js/main.45b06667.chunk.js","sourcesContent":["const { REACT_APP_MOVIE_IMAGE_BASE_URL } = process.env;\n\nconst TMDB_IMAGE_BASE_URL = (width = 300) => `${REACT_APP_MOVIE_IMAGE_BASE_URL}${width}`;\n\nexport function updateMoviePictureUrls(movieResult, width = 300) {\n  return {\n    ...movieResult,\n    backdrop_path:\n      movieResult.backdrop_path && `${TMDB_IMAGE_BASE_URL(width)}${movieResult.backdrop_path}`,\n    poster_path:\n      movieResult.poster_path && `${TMDB_IMAGE_BASE_URL(width)}${movieResult.poster_path}`\n  };\n}\n\nexport function getMoviesList(moviesResponse) {\n  return !!moviesResponse\n    ? [\n        ...moviesResponse.results\n          .map((movieResult) => updateMoviePictureUrls(movieResult))\n          .sort((a, b) => b.popularity - a.popularity)\n      ]\n    : null;\n}\n\nexport function normalizeMovieList(movieList) {\n  // normalize pictures urls\n  const normPictures = movieList.map((movie) => updateMoviePictureUrls(movie));\n\n  return normPictures;\n}\n","import { normalizeMovieList, updateMoviePictureUrls } from './helpers';\n\nconst { REACT_APP_MOVIE_DB_API_KEY, REACT_APP_MOVIE_DB_BASE_URL } = process.env;\n\nconst createMovieDbUrl = (relativeUrl, queryParams) => {\n  let baseUrl = `${REACT_APP_MOVIE_DB_BASE_URL}${relativeUrl}?api_key=${REACT_APP_MOVIE_DB_API_KEY}&language=en-US`;\n  if (queryParams) {\n    Object.keys(queryParams).forEach(\n      (paramName) => (baseUrl += `&${paramName}=${queryParams[paramName]}`)\n    );\n  }\n  return baseUrl;\n};\n\nconst callApi = async (endpoint) => {\n  const response = await fetch(endpoint);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  //\n  const json = await response.json();\n\n  return { ...json };\n};\n\nexport const getTopMovies = async ({ page }) => {\n  const fullUrl = createMovieDbUrl('/movie/upcoming', {\n    page\n  });\n  return callApi(fullUrl);\n};\n\nexport const searchMovies = async ({ page, query }) => {\n  const fullUrl = createMovieDbUrl('/search/movie', {\n    page,\n    query\n  });\n  return callApi(fullUrl);\n};\n\nexport const getMovieDetails = async ({ movieId }) => {\n  const fullUrl = createMovieDbUrl(`/movie/${movieId}`);\n\n  // call\n  const response = await callApi(fullUrl);\n\n  // normalize data\n  const movie = updateMoviePictureUrls(response);\n\n  return movie;\n};\n\nexport const getMoviesInDate = async ({ date = new Date(), page = 1 }) => {\n  if (!(date instanceof Date)) {\n    return Promise.reject('incorrect date object');\n  }\n\n  const dateStart = new Date(date.getTime());\n  dateStart.setMonth(date.getMonth() - 1);\n\n  const fullUrl = createMovieDbUrl('/discover/movie', {\n    page,\n    language: 'en-US',\n    region: 'US',\n    sort_by: 'popularity.desc',\n    include_adult: false,\n    'primary_release_date.gte': dateStart.toISOString().split('T')[0],\n    'primary_release_date.lte': date.toISOString().split('T')[0]\n  });\n\n  // call\n  const response = await callApi(fullUrl);\n\n  // normalize data\n  const movieList = normalizeMovieList(response.results);\n\n  return movieList;\n};\n","import {\n  createAsyncThunk,\n  createDraftSafeSelector,\n  createEntityAdapter,\n  createSlice\n} from '@reduxjs/toolkit';\nimport { getMovieDetails, getMoviesInDate } from '../../middleware/tmdb-api';\n\nconst moviesAdapter = createEntityAdapter();\n\n// Initial state\nconst initialState = moviesAdapter.getInitialState({\n  isLoading: false,\n  currentPage: 1,\n  movieSelected: null\n});\n\n// Action thunk to fetch movies\nexport const fetchMovies = createAsyncThunk(\n  'movies/fetchMovies',\n  async ({ date = new Date() }, { getState }) => {\n    const currentPage = 1;\n    const movieList = await getMoviesInDate({ date, page: currentPage });\n    return { movieList, currentPage };\n  }\n);\n\n// Action thunk to fetch next movies\nexport const fetchMoviesNext = createAsyncThunk(\n  'movies/fetchMoviesNext',\n  async ({ date }, { getState }) => {\n    const nextPage = selectCurrentPage(getState()) + 1;\n    const movieList = await getMoviesInDate({ date, page: nextPage });\n    return { movieList, currentPage: nextPage };\n  }\n);\n\n// Action thunk to fetch movie detail\nexport const fetctMovieDetail = createAsyncThunk(\n  'movies/fetctMovieDetail',\n  async ({ movieId }, { getState }) => {\n    // check if current state has movie details\n    const movie = selectMoviesById(getState(), movieId);\n\n    if (movie?.detailLoaded) {\n      return { id: movieId, movieDetail: movie };\n    }\n\n    const movieDetail = await getMovieDetails({ movieId });\n    return { id: movieId, movieDetail };\n  }\n);\n\n//\nexport const moviesSlice = createSlice({\n  name: 'movies', // name of this slice state\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchMovies.fulfilled, (state, action) => {\n        moviesAdapter.setAll(state, action.payload.movieList);\n        state.currentPage = action.payload.currentPage;\n        state.isLoading = false;\n      })\n      .addCase(fetchMoviesNext.fulfilled, (state, action) => {\n        moviesAdapter.addMany(state, action.payload.movieList);\n        state.currentPage = action.payload.currentPage;\n        state.isLoading = false;\n      })\n      .addCase(fetctMovieDetail.fulfilled, (state, action) => {\n        const { id, movieDetail } = action.payload;\n\n        moviesAdapter.updateOne(state, {\n          id,\n          changes: { ...movieDetail, detailLoaded: true }\n        });\n        state.movieSelected = id;\n        state.isLoading = false;\n      })\n      .addMatcher(\n        // any action ending with 'pending' should mark as 'isLoading'\n        (action) => action.type.startsWith('movies/') && action.type.endsWith('pending'),\n        (state, action) => {\n          state.isLoading = true;\n          state.movieSelected = null;\n        }\n      );\n  }\n});\n\n// Action creators\n// export const {} = movieBrowserSlice.actions;\n\n// Reducer\nexport default moviesSlice.reducer;\n\n// Selectors\nconst selectSelf = (state) => state;\n\nexport const {\n  selectAll: selectMovies,\n  selectById: selectMoviesById,\n  selectTotal: selectMoviesTotal\n} = moviesAdapter.getSelectors((state) => state.movies);\n\nexport const selectCurrentPage = createDraftSafeSelector(\n  selectSelf,\n  (state) => state.movies.currentPage\n);\n\nexport const selectIsLoading = createDraftSafeSelector(\n  selectSelf,\n  (state) => state.movies.isLoading\n);\n\nexport const selectMovieSelected = createDraftSafeSelector(selectSelf, (state) =>\n  selectMoviesById(state, state.movies.movieSelected)\n);\n","import styled from 'styled-components';\n\nconst MovieList = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  justify-content: space-between;\n  align-content: stretch;\n  align-items: flex-start;\n\n  & > * {\n    margin: 6px;\n  }\n`;\n\nexport default MovieList;\n","import { Spinner } from '@blueprintjs/core';\nimport React from 'react';\n\nfunction LoaderComponent({ isLoading, children }) {\n  if (isLoading) {\n    return <Spinner size={50} value={null} />;\n  }\n  // Render nothing if no children present\n  return children ? children : null;\n}\n\nexport default LoaderComponent;\n","import { Intent, Tag } from '@blueprintjs/core';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport { withLoading } from './helpers';\n\nconst MoviePoster = withLoading(styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-content: stretch;\n  align-items: center;\n  cursor: pointer;\n  max-width: ${(props) => props.maxWidth || '100%'};\n\n  & > * {\n    margin-bottom: 2px;\n  }\n`);\n\nconst Image = styled.img`\n  max-width: 100%;\n`;\n\nconst Title = styled(({ ...props }) => <Tag fill={true} intent={Intent.PRIMARY} {...props} />)``;\n\n/* */\nMoviePoster.Image = Image;\nMoviePoster.Title = Title;\n\nexport default MoviePoster;\n","import { Classes } from '@blueprintjs/core';\nimport * as React from 'react';\n\nexport function withLoading(Component) {\n  return (props) => <Component className={props.loading && Classes.SKELETON} {...props} />;\n}\n","import React from 'react';\n\nimport MoviePoster from '../blocks/MoviePoster';\n\nconst MovieCard = ({ movie, onClick }) => {\n  return (\n    <MoviePoster onClick={onClick} maxWidth=\"300px\">\n      <MoviePoster.Image src={movie.poster_path} />\n      <MoviePoster.Title>{movie.title}</MoviePoster.Title>\n    </MoviePoster>\n  );\n};\n\nexport default MovieCard;\n","import { createSelector, createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  movieModal: 'closed'\n};\n\nconst layoutsSlice = createSlice({\n  name: 'layouts',\n  initialState,\n  reducers: {\n    layoutOpen(state, action) {\n      const element = action.payload;\n      state[element] = 'opened';\n    },\n    layoutClose(state, action) {\n      const element = action.payload;\n      state[element] = 'closed';\n    }\n  }\n});\n\n// Action creators\nexport const { layoutOpen, layoutClose } = layoutsSlice.actions;\n\n// Reducer\nexport default layoutsSlice.reducer;\n\n// Selectors\nconst selectSelf = (state) => state;\n\nexport const selectMovieModal = createSelector(selectSelf, (state) => state.layouts.movieModal);\n\nexport const selectIsMovieModalOpen = createSelector(\n  selectMovieModal,\n  (movieModal) => movieModal === 'opened'\n);\n","import { useDispatch } from 'react-redux';\n\nimport MovieCard from '../components/MovieCard';\nimport { layoutOpen } from '../features/layouts/layoutsSlice';\nimport { fetctMovieDetail } from '../features/movies/moviesSlice';\n\nconst MovieContainer = ({ movie }) => {\n  const dispatch = useDispatch();\n  const clickOpenMovieModal = () => {\n    dispatch(fetctMovieDetail({ movieId: movie.id }));\n    dispatch(layoutOpen('movieModal'));\n  };\n\n  return <MovieCard movie={movie} onClick={clickOpenMovieModal} />;\n};\n\nexport default MovieContainer;\n","import React from 'react';\n\nimport MovieList from '../blocks/MovieList';\nimport LoaderComponent from '../components/Loader';\nimport MovieContainer from './MovieContainer';\n\nconst MovieGroup = ({ movies, isLoading }) => {\n  return (\n    <MovieList>\n      {movies &&\n        movies.map((movie) => <MovieContainer movie={movie} key={movie.id}></MovieContainer>)}\n      <LoaderComponent isLoading={isLoading} />\n    </MovieList>\n  );\n};\n\nexport default MovieGroup;\n","import { Classes, Dialog, H1, H5 } from '@blueprintjs/core';\nimport React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components/macro';\n\nimport Loader from '../components/Loader';\nimport { layoutClose, selectIsMovieModalOpen } from '../features/layouts/layoutsSlice';\nimport { selectIsLoading, selectMovieSelected } from '../features/movies/moviesSlice';\n\nconst StyledDialog = styled(Dialog)`\n  /*.bp3-dialog-body {\n    background-image: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)),\n      url(${(props) => props.backgroundImg});\n    background-repeat: no-repeat;\n    background-size: 100%;\n    height: 100%;\n    min-height: 400px;\n    color: white;\n  }*/\n`;\n\n/* Custom hook */\nconst useFormatMovie = (movie) => {\n  movie = movie || {};\n\n  return useMemo(\n    () => ({\n      ...movie,\n      date: (movie.release_date && new Date(movie.release_date).toLocaleDateString()) || '',\n      genres: movie.genres ? movie.genres.map((genre) => genre.name).join(', ') : '',\n      budget: (movie.budget && `$${movie.budget.toLocaleString()}`) || '(unknown)'\n    }),\n    [movie]\n  );\n};\n\nconst MovieModal = () => {\n  const dispatch = useDispatch();\n\n  const isOpened = useSelector(selectIsMovieModalOpen);\n  const isLoading = useSelector(selectIsLoading);\n\n  /* */\n  const { title, date, genres, overview, popularity, budget } = useFormatMovie(\n    useSelector(selectMovieSelected)\n  );\n\n  /* */\n  const clickCloseMovieModal = () => dispatch(layoutClose('movieModal'));\n\n  return (\n    <StyledDialog title={null} onClose={clickCloseMovieModal} isOpen={isOpened}>\n      <div className={Classes.DIALOG_BODY}>\n        <Loader isLoading={isLoading}>\n          <H1>{title}</H1>\n          <H5>{date}</H5>\n          <H5>{genres}</H5>\n          <p>{overview}</p>\n          <p>Popularity: {popularity}</p>\n          <p>Budget: {budget}</p>\n        </Loader>\n      </div>\n    </StyledDialog>\n  );\n};\n\nexport default MovieModal;\n","import { Alignment, Navbar, NavbarGroup, NavbarHeading } from '@blueprintjs/core';\nimport { DateInput } from '@blueprintjs/datetime';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components/macro';\n\nimport * as scrollHelpers from '../common/scroll.helpers';\nimport {\n  fetchMovies,\n  fetchMoviesNext,\n  selectIsLoading,\n  selectMovies\n} from '../features/movies/moviesSlice';\nimport MovieGroup from './MovieGroup';\nimport MovieModal from './MovieModal';\n\nconst StyledContentDiv = styled.div`\n  && {\n    margin-top: 64px; /* Bar height */\n  }\n`;\n\nconst StyledGridDiv = styled.div`\n  && {\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-content: stretch;\n    align-items: flex-start;\n    & > * {\n      margin: 12px;\n    }\n  }\n`;\n\nconst MoviePage = () => {\n  const dispatch = useDispatch();\n\n  const [birthDate, setBirthDate] = useState(new Date('1983-06-13'));\n\n  const movieList = useSelector(selectMovies);\n  const isLoading = useSelector(selectIsLoading);\n\n  /* */\n  const handleDateChange = (date, isUserChange) => {\n    if (isUserChange) {\n      setBirthDate(new Date(date));\n    }\n  };\n\n  /* Effect to handle birth date changes (including first page load) */\n  useEffect(() => {\n    dispatch(fetchMovies({ date: birthDate }));\n  }, [dispatch, birthDate]);\n\n  /* Effect to handle window scroll changes */\n  useEffect(() => {\n    const handleScroll = () => {\n      if (!isLoading) {\n        let percentageScrolled = scrollHelpers.getScrollDownPercentage(window);\n        if (percentageScrolled > 0.95) {\n          dispatch(fetchMoviesNext({ date: birthDate }));\n        }\n      }\n    };\n    window.onscroll = handleScroll;\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [dispatch, isLoading, birthDate]);\n\n  /* */\n  return (\n    <>\n      <Navbar fixedToTop={true} className=\"bp3-dark\">\n        <NavbarGroup align={Alignment.LEFT}>\n          <NavbarHeading>Season Movies</NavbarHeading>\n        </NavbarGroup>\n      </Navbar>\n      <StyledContentDiv>\n        <div></div>\n        <StyledGridDiv>\n          <div>\n            <DateInput\n              formatDate={(date) => date.toLocaleDateString()}\n              onChange={handleDateChange}\n              parseDate={(str) => new Date(str)}\n              placeholder={'D/M/YYYY'}\n              minDate={new Date('1902-01-01')}\n              value={birthDate}\n            />\n          </div>\n          <div>\n            <MovieGroup movies={movieList} isLoading={isLoading} />\n          </div>\n        </StyledGridDiv>\n      </StyledContentDiv>\n      <MovieModal />\n    </>\n  );\n};\n\nexport default MoviePage;\n","export const getScrollDownPercentage = (window) => {\n  const pageHeight = window.document.documentElement.scrollHeight;\n  const clientHeight = window.document.documentElement.clientHeight;\n  const scrollPos = window.pageYOffset;\n  const currentPosition = scrollPos + clientHeight;\n  const percentageScrolled = currentPosition / pageHeight;\n  return percentageScrolled;\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport layoutsSlice from '../features/layouts/layoutsSlice';\nimport moviesReducer from '../features/movies/moviesSlice';\n\nconst store = configureStore({\n  reducer: {\n    movies: moviesReducer,\n    layouts: layoutsSlice\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger)\n});\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components/macro';\nimport MoviePage from './containers/MoviePage';\n\n// import MoviePage from './containers/MoviePage';\nimport store from './store';\n\n// import { Button, Card, H5, Classes } from '@blueprintjs/core';\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n  }\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n  }\n`;\n\n//\nconst theme = {\n  colors: {\n    lightGray1: '#CED9E0',\n    lightGray2: '#D8E1E8',\n    lightGray3: '#E1E8ED',\n    lightGray4: '#EBF1F5',\n    lightGray5: '#F5F8FA'\n  }\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <>\n          <MoviePage />\n          <GlobalStyle />\n        </>\n      </Provider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/datetime/lib/css/blueprint-datetime.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/select/lib/css/blueprint-select.css';\nimport '@blueprintjs/table/lib/css/table.css';\nimport 'normalize.css/normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}