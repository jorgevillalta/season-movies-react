{"version":3,"sources":["common/redux.helpers.js","middleware/tmdb-api.js","actions/index.js","containers/helpers.js","blocks/MovieList.jsx","components/Loader.jsx","blocks/MoviePoster.jsx","blocks/helpers.js","components/MovieCard.jsx","containers/MovieContainer.jsx","actions/modal.js","containers/MovieGroup.jsx","containers/MovieModal.jsx","containers/MoviePage.jsx","common/scroll.helpers.js","reducers/modal.js","reducers/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["createReducer","initialState","actionHandlerKeyFuncs","state","action","actionHandler","type","createAction","actionProps","createAsyncActionCreator","actionType","asyncRequestFn","requestParams","dispatch","request","then","json","response","catch","error","initialAsyncState","isLoading","createAsyncReducer","startReducerFn","successReducerFn","errorReducerFn","process","REACT_APP_MOVIE_DB_API_KEY","REACT_APP_MOVIE_DB_BASE_URL","createMovieDbUrl","relativeUrl","queryParams","baseUrl","Object","keys","forEach","paramName","callApi","endpoint","fetch","ok","Promise","reject","getMovieDetails","a","movieId","fullUrl","getMoviesInDate","date","Date","page","dateStart","getTime","setMonth","getMonth","language","region","sort_by","include_adult","toISOString","split","getMovies","reset","movieService","TMDB_IMAGE_BASE_URL","width","getMoviesList","moviesResponse","results","map","movieResult","backdrop_path","poster_path","updateMoviePictureUrls","sort","b","popularity","MovieList","styled","div","LoaderComponent","children","size","value","Component","MoviePoster","props","maxWidth","className","loading","Classes","SKELETON","Image","img","Title","fill","intent","Intent","PRIMARY","MovieCard","movie","onClick","src","title","MovieContainer","useDispatch","clickOpenMovieModal","useCallback","id","MovieGroup","movies","key","Loader","StyledDialog","Dialog","useFormatMovie","useMemo","release_date","toLocaleDateString","genres","genre","name","join","budget","toLocaleString","MovieModal","useSelector","isOpen","movieBrowser","movieModal","movieDetails","shallowEqual","useEffect","overview","clickCloseMovieModal","onClose","DIALOG_BODY","StyledContentDiv","StyledGridDiv","MoviePage","useState","currentPage","setCurrentPage","birthDate","setBirthDate","movieList","movieHelpers","handleScroll","window","pageHeight","document","documentElement","scrollHeight","clientHeight","pageYOffset","scrollHelpers","nextPage","onscroll","removeEventListener","fixedToTop","align","Alignment","LEFT","formatDate","onChange","isUserChange","parseDate","str","placeholder","minDate","movieModalReducer","undefined","moviesSuccessReducer","existingMovies","movieBrowserReducer","combineReducers","movieSearch","rootReducer","loggerMiddleware","createLogger","store","createStore","composeWithDevTools","compose","applyMiddleware","thunkMiddlware","GlobalStyle","createGlobalStyle","theme","colors","lightGray1","lightGray2","lightGray3","lightGray4","lightGray5","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d81f3f3.chunk.js","sourcesContent":["// Helper function to enables passing an object with\n// the action.type as the key and the reducer function as the value\nexport const createReducer = (\n  initialState = {},\n  actionHandlerKeyFuncs = {}\n) => {\n  return (state = initialState, action) => {\n    const actionHandler = actionHandlerKeyFuncs[action.type];\n    return actionHandler ? actionHandler(state, action) : state;\n  };\n};\n\n// Creates a basic action\nconst createAction = (type, actionProps) => {\n  return {\n    type,\n    ...actionProps\n  };\n};\n\n// e.g. createAsyncActionCreator('GET_TOP_MOVIES', getTopMovies, {page: 1})\n// I admit that passing the asyncRequestFn without params is not ideal, but\n// wanted to capture the requestParams as part of the start action for logging transparency\nexport const createAsyncActionCreator = (\n  actionType,\n  asyncRequestFn,\n  requestParams\n) => {\n  return (dispatch) => {\n    dispatch(createAction(`${actionType}_START`, { request: requestParams }));\n    // NOTE: asyncRequestFn must accept single object parameter\n    // in order to resolve param values\n    return asyncRequestFn(requestParams)\n      .then((json) =>\n        dispatch(createAction(`${actionType}_SUCCESS`, { response: json }))\n      )\n      .catch((error) =>\n        dispatch(createAction(`${actionType}_ERROR`, { error }))\n      );\n  };\n};\n\n// We're setting these based on the state of the request\nconst initialAsyncState = { isLoading: false, response: null, request: null };\n\n// Generic way of handling state changes for an async request\n// Can override {action_type}_START, {action_type}_SUCCESS, {action_type}_ERROR\nexport const createAsyncReducer = (\n  actionType,\n  actionHandlerKeyFuncs = {},\n  initialState = initialAsyncState\n) => {\n  const startReducerFn = (state, action) => ({\n    ...state,\n    isLoading: true,\n    request: action.request\n  });\n  const successReducerFn = (state, action) => ({\n    ...state,\n    isLoading: false,\n    response: action.response\n  });\n  const errorReducerFn = (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error\n  });\n\n  return createReducer(initialState, {\n    [`${actionType}_START`]: startReducerFn,\n    [`${actionType}_SUCCESS`]: successReducerFn,\n    [`${actionType}_ERROR`]: errorReducerFn,\n    ...actionHandlerKeyFuncs\n  });\n};\n","const { REACT_APP_MOVIE_DB_API_KEY, REACT_APP_MOVIE_DB_BASE_URL } = process.env;\n\nconst createMovieDbUrl = (relativeUrl, queryParams) => {\n  let baseUrl = `${REACT_APP_MOVIE_DB_BASE_URL}${relativeUrl}?api_key=${REACT_APP_MOVIE_DB_API_KEY}&language=en-US`;\n  if (queryParams) {\n    Object.keys(queryParams).forEach(\n      (paramName) => (baseUrl += `&${paramName}=${queryParams[paramName]}`)\n    );\n  }\n  return baseUrl;\n};\n\nconst callApi = (endpoint) => {\n  return fetch(endpoint).then((response) =>\n    response.json().then((json) => {\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n\n      // normalization\n      // ...\n\n      return {\n        ...json\n      };\n    })\n  );\n};\n\nexport const getTopMovies = async ({ page }) => {\n  const fullUrl = createMovieDbUrl('/movie/upcoming', {\n    page\n  });\n  return callApi(fullUrl);\n};\n\nexport const searchMovies = async ({ page, query }) => {\n  const fullUrl = createMovieDbUrl('/search/movie', {\n    page,\n    query\n  });\n  return callApi(fullUrl);\n};\n\nexport const getMovieDetails = async ({ movieId }) => {\n  const fullUrl = createMovieDbUrl(`/movie/${movieId}`);\n  return callApi(fullUrl);\n};\n\nexport const getMoviesInDate = async ({ date = new Date(), page = 1 }) => {\n  if (!(date instanceof Date)) {\n    return Promise.reject('incorrect date object');\n  }\n\n  const dateStart = new Date(date.getTime());\n  dateStart.setMonth(date.getMonth() - 1);\n\n  const fullUrl = createMovieDbUrl('/discover/movie', {\n    page,\n    language: 'en-US',\n    region: 'US',\n    sort_by: 'popularity.desc',\n    include_adult: false,\n    'primary_release_date.gte': dateStart.toISOString().split('T')[0],\n    'primary_release_date.lte': date.toISOString().split('T')[0]\n  });\n  return callApi(fullUrl);\n};\n","import { createAsyncActionCreator } from '../common/redux.helpers';\nimport * as movieService from '../middleware/tmdb-api';\n\nexport const GET_MOVIES = 'GET_MOVIES';\nexport const SEARCH_MOVIES = 'SEARCH_MOVIES';\nexport const GET_MOVIE_DETAILS = 'GET_MOVIE_DETAILS';\n\nexport const getMovies = (date, page, reset = false) =>\n  createAsyncActionCreator(\n    // actionType\n    GET_MOVIES,\n    // requestFn\n    movieService.getMoviesInDate,\n    // requestParams\n    { date, page, reset }\n  );\n\nexport const searchMovies = (query, page) =>\n  createAsyncActionCreator(SEARCH_MOVIES, movieService.searchMovies, {\n    query,\n    page\n  });\n\nexport const getMovieDetails = (movieId) =>\n  createAsyncActionCreator(GET_MOVIE_DETAILS, movieService.getMovieDetails, {\n    movieId\n  });\n","const { REACT_APP_MOVIE_IMAGE_BASE_URL } = process.env;\n\nconst TMDB_IMAGE_BASE_URL = (width = 300) =>\n  `${REACT_APP_MOVIE_IMAGE_BASE_URL}${width}`;\n\nexport const updateMoviePictureUrls = (movieResult, width = 300) => ({\n  ...movieResult,\n  backdrop_path:\n    movieResult.backdrop_path &&\n    `${TMDB_IMAGE_BASE_URL(width)}${movieResult.backdrop_path}`,\n  poster_path:\n    movieResult.poster_path &&\n    `${TMDB_IMAGE_BASE_URL(width)}${movieResult.poster_path}`\n});\n\nexport const getMoviesList = (moviesResponse) => {\n  return !!moviesResponse\n    ? [\n      ...moviesResponse.results\n        .map((movieResult) => updateMoviePictureUrls(movieResult))\n        .sort((a, b) => b.popularity - a.popularity)\n    ]\n    : null;\n};\n","import styled from 'styled-components';\n\nconst MovieList = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  justify-content: space-between;\n  align-content: stretch;\n  align-items: flex-start;\n\n  & > * {\n    margin: 6px;\n  }\n`;\n\nexport default MovieList;\n","import { Spinner } from '@blueprintjs/core';\nimport React from 'react';\n\n/*const styles = {\n  refreshStyle: {\n    position: 'relative',\n    display: 'block',\n    margin: '0 auto'\n  }\n};*/\n\nfunction LoaderComponent({ isLoading, children }) {\n  if (isLoading) {\n    return <Spinner size={50} value={null} />;\n  }\n  // Render nothing if no children present\n  return children ? children : null;\n}\n\nexport default LoaderComponent;\n","import { Intent, Tag } from '@blueprintjs/core';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport { withLoading } from './helpers';\n\nconst MoviePoster = withLoading(styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-content: stretch;\n  align-items: center;\n  cursor: pointer;\n  max-width: ${(props) => props.maxWidth || '100%'};\n\n  & > * {\n    margin-bottom: 2px;\n  }\n`);\n\nconst Image = styled.img`\n  max-width: 100%;\n`;\n\nconst Title = styled(({ ...props }) => (\n  <Tag fill={true} intent={Intent.PRIMARY} {...props} />\n))``;\n\n/* */\nMoviePoster.Image = Image;\nMoviePoster.Title = Title;\n\nexport default MoviePoster;\n","import { Classes } from '@blueprintjs/core';\nimport * as React from 'react';\n\nexport function withLoading(Component) {\n  return (props) => (\n    <Component className={props.loading && Classes.SKELETON} {...props} />\n  );\n}\n","import React from 'react';\n\nimport MoviePoster from '../blocks/MoviePoster';\n\nconst MovieCard = ({ movie, onClick }) => {\n  return (\n    <MoviePoster onClick={onClick} maxWidth=\"300px\">\n      <MoviePoster.Image src={movie.poster_path} />\n      <MoviePoster.Title>{movie.title}</MoviePoster.Title>\n    </MoviePoster>\n  );\n};\n\nexport default MovieCard;\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { openMovieModal } from '../actions/modal';\nimport MovieCard from '../components/MovieCard';\n\nconst MovieContainer = ({ movie }) => {\n  const dispatch = useDispatch();\n\n  const clickOpenMovieModal = useCallback(\n    () => dispatch(openMovieModal(movie.id)),\n    [dispatch, movie.id]\n  );\n\n  return <MovieCard movie={movie} onClick={clickOpenMovieModal} />;\n};\n\nexport default MovieContainer;\n","// List of movie modal action type keys\n/*export const modalKeys = {\n  OPEN_MOVIE_MODAL: 'OPEN_MOVIE_MODAL',\n  CLOSE_MOVIE_MODAL: 'CLOSE_MOVIE_MODAL'\n};*/\n\nexport const OPEN_MOVIE_MODAL = 'OPEN_MOVIE_MODAL';\nexport const CLOSE_MOVIE_MODAL = 'CLOSE_MOVIE_MODAL';\n\n// Opens the <MovieModal /> with a movieId\nexport const openMovieModal = (movieId) => {\n  return {\n    type: OPEN_MOVIE_MODAL,\n    movieId\n  };\n};\n\n// Closes the <MovieModal />\nexport const closeMovieModal = () => {\n  return {\n    type: CLOSE_MOVIE_MODAL\n  };\n};\n","import React from 'react';\n\nimport MovieList from '../blocks/MovieList';\nimport LoaderComponent from '../components/Loader';\nimport MovieContainer from './MovieContainer';\n\nconst MovieGroup = ({ movies, isLoading }) => {\n  return (\n    <MovieList>\n      {movies &&\n        movies.map((movie) => (\n          <MovieContainer movie={movie} key={movie.id}></MovieContainer>\n        ))}\n      <LoaderComponent isLoading={isLoading} />\n    </MovieList>\n  );\n};\n\nexport default MovieGroup;\n","import { Classes, Dialog, H1, H5 } from '@blueprintjs/core';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components/macro';\n\nimport { getMovieDetails } from '../actions';\nimport { closeMovieModal } from '../actions/modal';\nimport Loader from '../components/Loader';\n\n/*const styles = {\n  // Can use functions to dynamically build our CSS\n  dialogContent: (backgroundUrl) => ({\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url(${backgroundUrl})`,\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: '100%',\n    height: '100%',\n    minHeight: 400,\n    color: 'white',\n    padding: 10\n  })\n};*/\n\nconst StyledDialog = styled(Dialog)`\n  /*.bp3-dialog-body {\n    background-image: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)),\n      url(${(props) => props.backgroundImg});\n    background-repeat: no-repeat;\n    background-size: 100%;\n    height: 100%;\n    min-height: 400px;\n    color: white;\n  }*/\n`;\n\n/* Custom hook */\nconst useFormatMovie = (movie) => {\n  movie = movie || {};\n\n  return useMemo(\n    () => ({\n      ...movie,\n      date:\n        (movie.release_date &&\n          new Date(movie.release_date).toLocaleDateString()) ||\n        '',\n      genres: movie.genres\n        ? movie.genres.map((genre) => genre.name).join(', ')\n        : '',\n      budget:\n        (movie.budget && `$${movie.budget.toLocaleString()}`) || '(unknown)'\n    }),\n    [movie]\n  );\n};\n\nconst MovieModal = () => {\n  const dispatch = useDispatch();\n\n  const { isOpen, movieId, isLoading, response } = useSelector(\n    (state) => ({\n      isOpen: state.movieBrowser.movieModal.isOpen || false,\n      movieId: state.movieBrowser.movieModal.movieId,\n      isLoading: state.movieBrowser.movieDetails.isLoading || false,\n      response: state.movieBrowser.movieDetails.response\n    }),\n    shallowEqual\n  );\n\n  /* */\n  useEffect(() => {\n    if (movieId) {\n      dispatch(getMovieDetails(movieId));\n    }\n  }, [dispatch, movieId]);\n\n  /* */\n  const { title, date, genres, overview, popularity, budget } = useFormatMovie(\n    response\n  );\n\n  /* */\n  const clickCloseMovieModal = useCallback(() => {\n    dispatch(closeMovieModal());\n  }, [dispatch]);\n\n  return (\n    <StyledDialog title={null} onClose={clickCloseMovieModal} isOpen={isOpen}>\n      <div className={Classes.DIALOG_BODY}>\n        <Loader isLoading={isLoading}>\n          <H1>{title}</H1>\n          <H5>{date}</H5>\n          <H5>{genres}</H5>\n          <p>{overview}</p>\n          <p>Popularity: {popularity}</p>\n          <p>Budget: {budget}</p>\n        </Loader>\n      </div>\n    </StyledDialog>\n  );\n};\n// \"connect\" our movie modal to the component store\n/*export default connect(\n  // Map nodes in our state to a properties of our component\n  (state) => ({\n    // Using lodash get, recursively check that a property is defined\n    // before try to access it - if it is undefined, it will return your default value\n    // _.get(object, 'path.to.targets[0].neat.stuff', defaultValue)\n    isOpen: _.get(state, 'movieBrowser.movieModal.isOpen', false),\n    movieId: _.get(state, 'movieBrowser.movieModal.movieId'),\n    movie: _.get(state, 'movieBrowser.movieDetails.response', {}),\n    isLoading: _.get(state, 'movieBrowser.movieDetails.isLoading', false)\n  }),\n  // Map an action to a prop, ready to be dispatched\n  { closeMovieModal, getMovieDetails }\n)(MovieModalContainer);*/\n\nexport default MovieModal;\n","import { Alignment, Navbar, NavbarGroup, NavbarHeading } from '@blueprintjs/core';\nimport { DateInput } from '@blueprintjs/datetime';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components/macro';\n\nimport { getMovies } from '../actions';\nimport * as scrollHelpers from '../common/scroll.helpers';\nimport * as movieHelpers from './helpers';\nimport MovieGroup from './MovieGroup';\nimport MovieModal from './MovieModal';\n\nconst StyledContentDiv = styled.div`\n  && {\n    margin-top: 64px; /* Bar height */\n  }\n`;\n\nconst StyledGridDiv = styled.div`\n  && {\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-content: stretch;\n    align-items: flex-start;\n    & > * {\n      margin: 12px;\n    }\n  }\n`;\n\nconst MoviePage = () => {\n  const dispatch = useDispatch();\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [birthDate, setBirthDate] = useState(new Date('1983-06-13'));\n\n  const { response, isLoading } = useSelector(\n    (state) => state.movieBrowser.movieList\n  );\n  const movies = movieHelpers.getMoviesList(response); // TODO useMemo when response changes\n\n  /* */\n  const handleDateChange = (date, isUserChange) => {\n    if (isUserChange) {\n      setBirthDate(new Date(date));\n    }\n  };\n\n  /* Effect to handle birth date changes (including first page load) */\n  useEffect(() => {\n    dispatch(getMovies(birthDate, 1, true)); // reset results = true\n  }, [dispatch, birthDate]);\n\n  /* Effect to handle window scroll changes */\n  useEffect(() => {\n    const handleScroll = () => {\n      if (!isLoading) {\n        let percentageScrolled = scrollHelpers.getScrollDownPercentage(window);\n        if (percentageScrolled > 0.8) {\n          const nextPage = currentPage + 1;\n          dispatch(getMovies(birthDate, nextPage));\n          setCurrentPage(nextPage);\n        }\n      }\n    };\n    window.onscroll = handleScroll;\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [dispatch, currentPage, isLoading, birthDate]);\n\n  /* */\n  return (\n    <>\n      <Navbar fixedToTop={true} className=\"bp3-dark\">\n        <NavbarGroup align={Alignment.LEFT}>\n          <NavbarHeading>Season Movies</NavbarHeading>\n        </NavbarGroup>\n      </Navbar>\n      <StyledContentDiv>\n        <div></div>\n        <StyledGridDiv>\n          <div>\n            <DateInput\n              formatDate={(date) => date.toLocaleDateString()}\n              onChange={handleDateChange}\n              parseDate={(str) => new Date(str)}\n              placeholder={'D/M/YYYY'}\n              minDate={new Date('1902-01-01')}\n            />\n          </div>\n          <div>\n            <MovieGroup movies={movies} isLoading={isLoading} />\n          </div>\n        </StyledGridDiv>\n      </StyledContentDiv>\n      <MovieModal />\n    </>\n  );\n};\n\nexport default MoviePage;\n","export const getScrollDownPercentage = (window) => {\n  const pageHeight = window.document.documentElement.scrollHeight;\n  const clientHeight = window.document.documentElement.clientHeight;\n  const scrollPos = window.pageYOffset;\n  const currentPosition = scrollPos + clientHeight;\n  const percentageScrolled = currentPosition / pageHeight;\n  return percentageScrolled;\n};\n","import { CLOSE_MOVIE_MODAL, OPEN_MOVIE_MODAL } from '../actions/modal';\nimport { createReducer } from '../common/redux.helpers';\n\n// Placeholder reducer for our movie modal\nconst movieModalReducer = createReducer(\n  { isOpen: false, movieId: undefined },\n  {\n    [OPEN_MOVIE_MODAL]: (state, action) => ({\n      isOpen: true,\n      movieId: action.movieId\n    }),\n    [CLOSE_MOVIE_MODAL]: (state, action) => ({\n      // Persist the movieId (and any other state tree objects)\n      ...state,\n      isOpen: false\n    })\n  }\n);\n\nexport default movieModalReducer;\n","import { combineReducers } from 'redux';\n\nimport { GET_MOVIE_DETAILS, GET_MOVIES, SEARCH_MOVIES } from '../actions';\nimport { createAsyncReducer } from '../common/redux.helpers';\nimport movieModalReducer from './modal';\n\nconst movieStartReducer = (state, action) => {\n  // Reset current results if date changes\n  const response =\n    state.response && !action.request.reset ? { ...state.response } : undefined;\n  return {\n    ...state,\n    isLoading: true,\n    request: action.request,\n    response: response\n  };\n};\n\n// This will create a new state with both the existing\n// movies and new pages of movies\nconst moviesSuccessReducer = (state, action) => {\n  const existingMovies = state.response ? state.response.results : [];\n  // Create a new state object to be returned\n  // When creating the new state, be sure to include any\n  // existing properties we want to persist\n  return {\n    ...state,\n    isLoading: false,\n    response: {\n      ...action.response,\n      results: [...existingMovies, ...action.response.results]\n    }\n  };\n};\n\n// Combines our movie browser related reducers to build our movieBrowser reducer\nconst movieBrowserReducer = combineReducers({\n  movieModal: movieModalReducer,\n  movieList: createAsyncReducer(GET_MOVIES, {\n    [`${GET_MOVIES}_START`]: movieStartReducer,\n    [`${GET_MOVIES}_SUCCESS`]: moviesSuccessReducer\n  }),\n  movieSearch: createAsyncReducer(SEARCH_MOVIES, {\n    [`${SEARCH_MOVIES}_SUCCESS`]: moviesSuccessReducer\n  }),\n  movieDetails: createAsyncReducer(GET_MOVIE_DETAILS)\n});\n\nexport default movieBrowserReducer;\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddlware from 'redux-thunk';\n\nimport movieBrowserReducer from '../reducers';\n\n// The root reducer will serve as the parent for all other reducers\n// We will add our module reducers to the root level here\nconst rootReducer = combineReducers({\n  movieBrowser: movieBrowserReducer\n});\n\n// Will log information about dispatched actions to the console\n// including the previous state, the action details, and the next state\nconst loggerMiddleware = createLogger();\n\nconst store = createStore(\n  // reducer\n  rootReducer,\n  // preloadedState\n  undefined,\n  // apply devtools\n  composeWithDevTools(\n    // compose simply enables us to apply several store enhancers\n    // Right now, we are only using applyMiddlware, so this is\n    // just future-proofing our application\n    compose(\n      // Middlware can intercept dispatched actions before they reach the reducer\n      // in order to modify it in some way\n      applyMiddleware(\n        // Thunk allows functions to be returned from action creators\n        // so we can do things like dispatch multiple actions in a\n        // single action creator for async actions\n        thunkMiddlware,\n        // logger will output the previous state, next state, and\n        // the action details to the console\n        loggerMiddleware\n      )\n    )\n  )\n);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components/macro';\n\nimport MoviePage from './containers/MoviePage';\nimport store from './store';\n\n// import { Button, Card, H5, Classes } from '@blueprintjs/core';\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n  }\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n  }\n`;\n\n// TODO move to a file\nconst theme = {\n  colors: {\n    lightGray1: '#CED9E0',\n    lightGray2: '#D8E1E8',\n    lightGray3: '#E1E8ED',\n    lightGray4: '#EBF1F5',\n    lightGray5: '#F5F8FA'\n  }\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <>\n          <MoviePage />\n          <GlobalStyle />\n        </>\n      </Provider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/datetime/lib/css/blueprint-datetime.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/select/lib/css/blueprint-select.css';\nimport '@blueprintjs/table/lib/css/table.css';\nimport 'normalize.css/normalize.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}